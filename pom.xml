<?xml version="1.0" encoding="UTF-8"?>

<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

    <!-- Inherit from Spring Boot parent -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.2</version>
        <relativePath/>
    </parent>

    <groupId>org.dellroad</groupId>
    <artifactId>vaadinbug</artifactId>
    <version>1.0.0</version>
    <name>Vaadin Bug Demo</name>
    <packaging>jar</packaging>
    <description>Demonstration of Vaadin Bug.</description>
    <distributionManagement>
        <site>
            <id>${project.artifactId}-site</id>
            <url>file://${project.basedir}/site</url>
        </site>
    </distributionManagement>
    <properties>

        <!-- Basic stuff -->
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Dependency versions -->
        <dellroad-dependencies.version>${project.parent.version}.0</dellroad-dependencies.version>
        <vaadin.version>24.3.5</vaadin.version>
        <line-awesome.version>1.1.0</line-awesome.version>
        <guava.version>33.0.0-jre</guava.version>

        <!--
            Other plugin dependency versions copied from dellroad-dependencies, as
            there's currently no way to do a BOM import of plugin dependency versions.
            See https://issues.apache.org/jira/browse/MNG-5588
        -->
        <aspectj-maven-plugin.version>1.14.0</aspectj-maven-plugin.version>
        <extra-enforcer-rules.version>1.5.1</extra-enforcer-rules.version>
        <maven-checkstyle-plugin.version>3.3.1</maven-checkstyle-plugin.version>
        <spotbugs-maven-plugin.version>4.8.3.1</spotbugs-maven-plugin.version>

    </properties>

    <dependencies>

        <!-- Vaadin -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-core</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.vaadin</groupId>
                    <artifactId>vaadin-dev</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat</groupId>
                    <artifactId>tomcat-annotations-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.parttio</groupId>
            <artifactId>line-awesome</artifactId>
            <version>${line-awesome.version}</version>
        </dependency>

        <!-- Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>

        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-to-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--
            Logging

            Our strategy:
                - LOG4J does the actual logging
                - SLF4J is the preferred API we use
                - Route java-commons-logging API through SLF4J
                    - Done for us by spring-jcl
                - Exclude all logback stuff
        -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>

        <!-- DellRoad Stuff -->
        <dependency>
            <groupId>org.dellroad</groupId>
            <artifactId>dellroad-stuff-main</artifactId>
        </dependency>
        <dependency>
            <groupId>org.dellroad</groupId>
            <artifactId>dellroad-stuff-spring</artifactId>
        </dependency>
        <dependency>
            <groupId>org.dellroad</groupId>
            <artifactId>dellroad-stuff-vaadin24</artifactId>
        </dependency>

        <!-- Guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- AspectJ -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>

    </dependencies>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.dellroad</groupId>
                <artifactId>dellroad-dependencies</artifactId>
                <version>${dellroad-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-spring-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>

        <plugins>

            <!-- Maven enforcer -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>extra-enforcer-rules</artifactId>
                        <version>${extra-enforcer-rules.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>maven_enforcer</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>

                                <!-- Enforce Java version -->
                                <requireJavaVersion>
                                    <version>[${java.version},)</version>
                                    <display>false</display>
                                </requireJavaVersion>

                                <!-- Enforce maximum bytecode version among dependencies -->
                                <enforceBytecodeVersion>
                                    <maxJdkVersion>${java.version}</maxJdkVersion>
                                </enforceBytecodeVersion>

                                <!-- Enforce Maven version 3.6.3 or better -->
                                <!-- https://github.com/jgitver/jgitver-maven-plugin/issues/119 -->
                                <requireMavenVersion>
                                    <version>[3.6.3,)</version>
                                </requireMavenVersion>

                                <!-- Check for dependency conflicts -->
                                <!-- <dependencyConvergence/> -->
                                <banDuplicatePomDependencyVersions/>

                                <!-- Check for same class appearing more than once but not identically -->
                                <banDuplicateClasses>
                                    <findAllDuplicates>true</findAllDuplicates>
                                    <ignoreWhenIdentical>true</ignoreWhenIdentical>
                                </banDuplicateClasses>

                                <!-- Other rules -->
                                <reactorModuleConvergence/>
                            <!--
                                <requireUpperBoundDeps/>        See https://github.com/vaadin/spring/issues/1070
                            -->

                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-resources</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                            <delimiters>
                                <delimiter>${*}</delimiter>
                            </delimiters>
                            <escapeString>\</escapeString>
                            <!--
                                Why this causes a warning:
                                https://github.com/jhipster/generator-jhipster/issues/22487#issuecomment-1773449062
                            -->
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/resources</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <release>${java.version}</release>
                    <showWarnings>true</showWarnings>
                    <compilerArgs>
                        <arg>-Xlint:all,-processing,-path</arg>
                        <arg>-Werror</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- AspectJ -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>${aspectj-maven-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>compile_and_weave_aspects</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <complianceLevel>${java.version}</complianceLevel>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <proc>none</proc><!-- https://stackoverflow.com/questions/28022190 -->
                            <weaveDirectories>
                                <weaveDirectory>${project.build.directory}/classes</weaveDirectory><!-- weave classes as well -->
                            </weaveDirectories>
                            <aspectLibraries>
                                <aspectLibrary>
                                    <groupId>org.springframework</groupId>
                                    <artifactId>spring-aspects</artifactId>
                                </aspectLibrary>
                                <aspectLibrary>
                                    <groupId>org.dellroad</groupId>
                                    <artifactId>dellroad-stuff-spring</artifactId>
                                </aspectLibrary>
                            </aspectLibraries>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Vaadin plugin -->
            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-frontend</goal>
                        </goals>
                        <phase>compile</phase>
                    </execution>
                </executions>
                <configuration>
                    <forceProductionBuild>true</forceProductionBuild>
                    <optimizeBundle>false</optimizeBundle>
                </configuration>
            </plugin>

            <!-- Build executable JAR with dependencies in lib/ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>vaadinbug.VaadinBug</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- Actually put the dependencies in lib/ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>arrange_dependencies</id>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Checkstyle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <dependencies>
                    <dependency>
                      <!-- Fix for java.lang.NoSuchMethodError: 'com.google.common.collect.ImmutableMap' -->
                      <groupId>com.google.guava</groupId>
                      <artifactId>guava</artifactId>
                      <version>${guava.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>default-verify</id>
                        <phase>verify</phase>
                        <configuration>
                            <failOnViolation>true</failOnViolation>
                            <includeResources>false</includeResources>
                            <includeTestResources>false</includeTestResources>
                            <includeTestSourceDirectory>true</includeTestSourceDirectory>
                            <excludeGeneratedSources>true</excludeGeneratedSources>
                            <sourceDirectories>
                                <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
                                <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
                            </sourceDirectories>
                            <configLocation>${project.basedir}/src/checkstyle/checkstyle.xml</configLocation>
                        </configuration>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>
</project>
